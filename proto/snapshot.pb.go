// Code generated by protoc-gen-go. DO NOT EDIT.
// source: snapshot.proto

/*
Package snapshot is a generated protocol buffer package.

It is generated from these files:
	snapshot.proto

It has these top-level messages:
	ImageData
	Result
*/
package snapshot

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ImageData struct {
	Image         []byte `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Sequence      uint32 `protobuf:"varint,2,opt,name=sequence" json:"sequence,omitempty"`
	DateTime      uint64 `protobuf:"varint,3,opt,name=date_time,json=dateTime" json:"date_time,omitempty"`
	SourceHost    string `protobuf:"bytes,4,opt,name=source_host,json=sourceHost" json:"source_host,omitempty"`
	SourceAddress string `protobuf:"bytes,5,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
	ImageType     string `protobuf:"bytes,6,opt,name=image_type,json=imageType" json:"image_type,omitempty"`
	Location      string `protobuf:"bytes,7,opt,name=location" json:"location,omitempty"`
}

func (m *ImageData) Reset()                    { *m = ImageData{} }
func (m *ImageData) String() string            { return proto.CompactTextString(m) }
func (*ImageData) ProtoMessage()               {}
func (*ImageData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ImageData) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *ImageData) GetSequence() uint32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *ImageData) GetDateTime() uint64 {
	if m != nil {
		return m.DateTime
	}
	return 0
}

func (m *ImageData) GetSourceHost() string {
	if m != nil {
		return m.SourceHost
	}
	return ""
}

func (m *ImageData) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *ImageData) GetImageType() string {
	if m != nil {
		return m.ImageType
	}
	return ""
}

func (m *ImageData) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

type Result struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Reply   string `protobuf:"bytes,2,opt,name=reply" json:"reply,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Result) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Result) GetReply() string {
	if m != nil {
		return m.Reply
	}
	return ""
}

func init() {
	proto.RegisterType((*ImageData)(nil), "snapshot.image_data")
	proto.RegisterType((*Result)(nil), "snapshot.result")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SnapShot service

type SnapShotClient interface {
	AddSnap(ctx context.Context, in *ImageData, opts ...grpc.CallOption) (*Result, error)
}

type snapShotClient struct {
	cc *grpc.ClientConn
}

func NewSnapShotClient(cc *grpc.ClientConn) SnapShotClient {
	return &snapShotClient{cc}
}

func (c *snapShotClient) AddSnap(ctx context.Context, in *ImageData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/snapshot.snap_shot/add_snap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SnapShot service

type SnapShotServer interface {
	AddSnap(context.Context, *ImageData) (*Result, error)
}

func RegisterSnapShotServer(s *grpc.Server, srv SnapShotServer) {
	s.RegisterService(&_SnapShot_serviceDesc, srv)
}

func _SnapShot_AddSnap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapShotServer).AddSnap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snapshot.snap_shot/AddSnap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapShotServer).AddSnap(ctx, req.(*ImageData))
	}
	return interceptor(ctx, in, info, handler)
}

var _SnapShot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "snapshot.snap_shot",
	HandlerType: (*SnapShotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add_snap",
			Handler:    _SnapShot_AddSnap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snapshot.proto",
}

func init() { proto.RegisterFile("snapshot.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0x3f, 0x6b, 0xc3, 0x30,
	0x10, 0xc5, 0x51, 0x9b, 0x3f, 0xf6, 0xb5, 0x09, 0x45, 0x64, 0x10, 0x29, 0xa5, 0x26, 0x50, 0xf0,
	0x94, 0x21, 0x5d, 0xba, 0x95, 0x6e, 0x9d, 0x45, 0x76, 0xa3, 0x5a, 0x47, 0x63, 0xb0, 0x2d, 0xd7,
	0x77, 0x1e, 0xfc, 0x65, 0xfb, 0x59, 0x8a, 0xa4, 0xda, 0x19, 0x7f, 0x3f, 0x3d, 0xd0, 0xbd, 0x07,
	0x5b, 0x6a, 0x4d, 0x47, 0x17, 0xc7, 0xc7, 0xae, 0x77, 0xec, 0x64, 0x32, 0xf1, 0xe1, 0x57, 0x00,
	0x54, 0x8d, 0xf9, 0xc6, 0xc2, 0x1a, 0x36, 0x72, 0x07, 0xcb, 0x40, 0x4a, 0x64, 0x22, 0xbf, 0xd7,
	0x11, 0xe4, 0x1e, 0x12, 0xc2, 0x9f, 0x01, 0xdb, 0x12, 0xd5, 0x4d, 0x26, 0xf2, 0x8d, 0x9e, 0x59,
	0x3e, 0x42, 0x6a, 0x0d, 0x63, 0xc1, 0x55, 0x83, 0xea, 0x36, 0x13, 0xf9, 0x42, 0x27, 0x5e, 0x9c,
	0xab, 0x06, 0xe5, 0x33, 0xdc, 0x91, 0x1b, 0xfa, 0x12, 0x8b, 0x8b, 0x23, 0x56, 0x8b, 0x4c, 0xe4,
	0xa9, 0x86, 0xa8, 0x3e, 0x1d, 0xb1, 0x7c, 0x81, 0xed, 0x7f, 0xc0, 0x58, 0xdb, 0x23, 0x91, 0x5a,
	0x86, 0xcc, 0x26, 0xda, 0x8f, 0x28, 0xe5, 0xd3, 0x74, 0x24, 0x8f, 0x1d, 0xaa, 0x55, 0x88, 0xa4,
	0xc1, 0x9c, 0xc7, 0x2e, 0xdc, 0x57, 0xbb, 0xd2, 0x70, 0xe5, 0x5a, 0xb5, 0x0e, 0x8f, 0x33, 0x1f,
	0xde, 0x60, 0xd5, 0x23, 0x0d, 0x35, 0x4b, 0x05, 0x6b, 0x1a, 0xca, 0xd2, 0x7f, 0xe2, 0xdb, 0x25,
	0x7a, 0x42, 0xdf, 0xba, 0xc7, 0xae, 0x1e, 0x43, 0xb9, 0x54, 0x47, 0x38, 0xbd, 0x43, 0xea, 0x67,
	0x2a, 0xfc, 0x4e, 0xf2, 0x04, 0x89, 0xb1, 0xb6, 0xf0, 0x42, 0xee, 0x8e, 0xf3, 0x9c, 0xd7, 0xe9,
	0xf6, 0x0f, 0x57, 0x1b, 0x3f, 0xfc, 0x5a, 0x85, 0xb1, 0x5f, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xf3, 0xb5, 0x34, 0xaf, 0x7e, 0x01, 0x00, 0x00,
}
